<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Qingnan Zhou | Xingyi Du&#39;s Homepage</title>
    <link>https://duxingyi-charles.github.io/author/qingnan-zhou/</link>
      <atom:link href="https://duxingyi-charles.github.io/author/qingnan-zhou/index.xml" rel="self" type="application/rss+xml" />
    <description>Qingnan Zhou</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2020</copyright><lastBuildDate>Sat, 18 Sep 2021 17:23:54 -0500</lastBuildDate>
    <image>
      <url>https://duxingyi-charles.github.io/img/avatar.jpg</url>
      <title>Qingnan Zhou</title>
      <link>https://duxingyi-charles.github.io/author/qingnan-zhou/</link>
    </image>
    
    <item>
      <title>Optimizing Global Injectivity for Constrained Parameterization</title>
      <link>https://duxingyi-charles.github.io/publication/optimizing-global-injectivity-for-constrained-parameterization/</link>
      <pubDate>Sat, 18 Sep 2021 17:23:54 -0500</pubDate>
      <guid>https://duxingyi-charles.github.io/publication/optimizing-global-injectivity-for-constrained-parameterization/</guid>
      <description>














&lt;figure id=&#34;figure-figure-1-given-a-non-injective-initial-parameterization-of-a-surface-mesh-left-with-inverted-triangles-red-boundary-intersections-orange-dots-and-overwound-vertices-magenta-dots-our-method-recovers-a-globally-injective-map-right-while-keeping-the-constraints-blue-points-in-place-the-inserts-zoom-in-on-one-region-in-the-initial-map-with-many-boundary-intersections-and-inverted-triangles-green-box-and-another-region-with-an-overwound-vertex-cyan-box&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://duxingyi-charles.github.io/img/SEA/fig1.jpeg&#34; data-caption=&#34;Figure 1. Given a non-injective initial parameterization of a surface mesh (left) with inverted triangles (red), boundary intersections (orange dots), and overwound vertices (magenta dots), our method recovers a globally injective map (right) while keeping the constraints (blue points) in place. The inserts zoom in on one region in the initial map with many boundary intersections and inverted triangles (green box) and another region with an overwound vertex (cyan box).&#34;&gt;


  &lt;img src=&#34;https://duxingyi-charles.github.io/img/SEA/fig1.jpeg&#34; alt=&#34;featured&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Figure 1. Given a non-injective initial parameterization of a surface mesh (left) with inverted triangles (red), boundary intersections (orange dots), and overwound vertices (magenta dots), our method recovers a globally injective map (right) while keeping the constraints (blue points) in place. The inserts zoom in on one region in the initial map with many boundary intersections and inverted triangles (green box) and another region with an overwound vertex (cyan box).
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;abstract&#34;&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Injective parameterizations of triangulated meshes are critical across applications but remain challenging to compute. Existing algorithms to find injectivity either require initialization from an injective starting state, which is currently only possible without positional constraints, or else can only prevent triangle inversion, which is insufficient to ensure injectivity. Here we present, to our knowledge, the first algorithm for recovering a globally injective parameterization from an arbitrary non-injective initial mesh subject to stationary constraints. These initial meshes can be inverted, wound about interior vertices and/or overlapping. Our algorithm in turn enables globally injective mapping for meshes with arbitrary positional constraints. Our key contribution is a new energy, called smooth excess area (SEA), that measures non-injectivity in a map. This energy is well-defined across both injective and non-injective maps and is smooth almost everywhere, making it readily minimizable using standard gradient-based solvers starting from a non-injective initial state. Importantly, we show that maps minimizing SEA are guaranteed to be locally injective and almost globally injective, in the sense that the overlapping area can be made arbitrarily small. Analyzing SEA’s behavior over a new benchmark set designed to test injective mapping, we find that optimizing SEA successfully recovers globally injective maps for 85% of the benchmark and obtains locally injective maps for 90%. In contrast, state-of-the-art methods for removing triangle inversion obtain locally injective maps for less than 6% of the benchmark, and achieve global injectivity (largely by chance as prior methods are not designed to recover it) on less than 4%.&lt;/p&gt;
&lt;h2 id=&#34;video&#34;&gt;&lt;strong&gt;Video&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;fast-forward&#34;&gt;&lt;strong&gt;Fast Forward&lt;/strong&gt;&lt;/h3&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/kJWOwzJw5_c&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;optimization-process&#34;&gt;&lt;strong&gt;Optimization Process&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The process of optimizing SEA (smooth excess area) on the examples presented in the paper.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/JXtlrBec4Rs&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;code-and-dataset&#34;&gt;&lt;strong&gt;Code and Dataset&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;We create a benchmark of 1791 examples for evaluating free-boundary injective mapping with positional constraints.&lt;/p&gt;
&lt;p&gt;Code and the benchmark dataset will be released soon.&lt;/p&gt;
&lt;h2 id=&#34;figures&#34;&gt;&lt;strong&gt;Figures&lt;/strong&gt;&lt;/h2&gt;















&lt;figure id=&#34;figure-figure-2-three-successful-examples-from-the-benchmark-initial-maps-first-column-maps-produced-by-our-method-second-column-which-are-all-globally-injective-and-maps-produced-by-lbd-third-column-and-sa-last-column-none-of-which-are-locally-or-globally-injective&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://duxingyi-charles.github.io/img/SEA/fig-success.png&#34; data-caption=&#34;Figure 2. Three successful examples from the benchmark: initial maps (first column), maps produced by our method (second column), which are all globally injective, and maps produced by LBD (third column) and SA (last column), none of which are locally or globally injective.&#34;&gt;


  &lt;img src=&#34;https://duxingyi-charles.github.io/img/SEA/fig-success.png&#34; alt=&#34;fig-success&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Figure 2. Three successful examples from the benchmark: initial maps (first column), maps produced by our method (second column), which are all globally injective, and maps produced by LBD (third column) and SA (last column), none of which are locally or globally injective.
  &lt;/figcaption&gt;


&lt;/figure&gt;
















&lt;figure id=&#34;figure-figure-3-from-left-to-right-input-meshes-with-one-or-two-boundaries-non-injective-initial-maps-globally-injective-maps-produced-by-our-method-sea-and-results-of-lbd-and-sa-both-lbd-and-sa-have-removed-most-or-all-inverted-triangles-but-the-results-are-neither-locally-or-globally-injective-due-to-overwound-vertices-and-boundary-intersections&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://duxingyi-charles.github.io/img/SEA/fig-toys.png&#34; data-caption=&#34;Figure 3. From left to right: input meshes (with one or two boundaries), non-injective initial maps, globally injective maps produced by our method (SEA), and results of LBD and SA. Both LBD and SA have removed most or all inverted triangles, but the results are neither locally or globally injective due to overwound vertices and boundary intersections.&#34;&gt;


  &lt;img src=&#34;https://duxingyi-charles.github.io/img/SEA/fig-toys.png&#34; alt=&#34;fig-toys&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Figure 3. From left to right: input meshes (with one or two boundaries), non-injective initial maps, globally injective maps produced by our method (SEA), and results of LBD and SA. Both LBD and SA have removed most or all inverted triangles, but the results are neither locally or globally injective due to overwound vertices and boundary intersections.
  &lt;/figcaption&gt;


&lt;/figure&gt;
















&lt;figure id=&#34;figure-figure-4-two-initial-maps-with-overwound-vertices-top-and-the-injective-maps-produced-by-our-method-bottom&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://duxingyi-charles.github.io/img/SEA/fig-overwound-1-rings.png&#34; data-caption=&#34;Figure 4. Two initial maps with overwound vertices (top) and the injective maps produced by our method (bottom).&#34;&gt;


  &lt;img src=&#34;https://duxingyi-charles.github.io/img/SEA/fig-overwound-1-rings.png&#34; alt=&#34;fig-overwound-1-rings&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Figure 4. Two initial maps with overwound vertices (top) and the injective maps produced by our method (bottom).
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;!-- ### **Acknowledgments**

This work is supported in part by NSF grant RI-1618685, NIH grant U2C CA233303-1, and Simons Math+X Investigators Award 400837. We would like to thank authors of several papers for providing code, data, and help with comparisons, and especially Hanxiao Shen, Ofir Weber, Alon Bright, Zohar Levi, and Xiao-Ming Fu. --&gt;
</description>
    </item>
    
    <item>
      <title>Boundary-Sampled Halfspaces: A New Representation for Constructive Solid Modeling</title>
      <link>https://duxingyi-charles.github.io/publication/boundary-sampled-halfspaces/</link>
      <pubDate>Fri, 21 May 2021 17:23:54 -0500</pubDate>
      <guid>https://duxingyi-charles.github.io/publication/boundary-sampled-halfspaces/</guid>
      <description>














&lt;figure id=&#34;figure-figure-1-a-segmented-shape-a-is-converted-into-our-representation-b-which-consists-of-halfspaces-associated-with-sparse-samples-colored-spheres-each-halfspace-is-either-a-simple-primitive-eg-plane-sphere-etc-or-a-free-form-implicit-surface-one-is-shown-in-transparency-the-representation-can-be-easily-edited-by-modifying-the-halfspaces-andor-their-samples-c&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://duxingyi-charles.github.io/img/BSH/fig1.png&#34; data-caption=&#34;Figure 1. A segmented shape (a) is converted into our representation (b), which consists of halfspaces associated with sparse samples (colored spheres). Each halfspace is either a simple primitive (e.g., plane, sphere, etc.) or a free-form implicit surface (one is shown in transparency). The representation can be easily edited by modifying the halfspaces and/or their samples (c).&#34;&gt;


  &lt;img src=&#34;https://duxingyi-charles.github.io/img/BSH/fig1.png&#34; alt=&#34;featured&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Figure 1. A segmented shape (a) is converted into our representation (b), which consists of halfspaces associated with sparse samples (colored spheres). Each halfspace is either a simple primitive (e.g., plane, sphere, etc.) or a free-form implicit surface (one is shown in transparency). The representation can be easily edited by modifying the halfspaces and/or their samples (c).
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;abstract&#34;&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;We present a novel representation of solid models for shape design. Like Constructive Solid Geometry (CSG), the solid shape is constructed from a set of halfspaces without the need for an explicit boundary structure. Instead of using Boolean expressions as in CSG, the shape is defined by sparsely placed samples on the boundary of each halfspace. This representation, called Boundary-Sampled Halfspaces (BSH), affords greater agility and expressiveness than CSG while simplifying the reverse engineering process. We discuss theoretical properties of the representation and present practical algorithms for boundary extraction and conversion from other representations. Our algorithms are demonstrated on both 2D and 3D examples.&lt;/p&gt;
&lt;h3 id=&#34;video&#34;&gt;&lt;strong&gt;Video&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;fast-forward&#34;&gt;Fast Forward&lt;/h4&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/ujd4t9skJ_Y&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h4 id=&#34;quick-summary&#34;&gt;Quick Summary&lt;/h4&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/rCKh39pEdrg&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h4 id=&#34;full-presentation&#34;&gt;Full Presentation&lt;/h4&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/-lKQAQhfX3I&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h4 id=&#34;software-demo&#34;&gt;Software Demo&lt;/h4&gt;
&lt;p&gt;We demonstrate the modeling process of various examples using Boundary-Sampled Halfspaces.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/BRO36bIMXxI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;2d-shape-design&#34;&gt;&lt;strong&gt;2D Shape Design&lt;/strong&gt;&lt;/h2&gt;















&lt;figure id=&#34;figure-figure-2-several-2d-shapes-modeled-by-bsh-halfspaces-for-the-last-two-shapes-are-not-shown-due-to-their-complexity&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://duxingyi-charles.github.io/img/BSH/fig-gallery-2D.png&#34; data-caption=&#34;Figure 2. Several 2D shapes modeled by BSH. Halfspaces for the last two shapes are not shown due to their complexity.&#34;&gt;


  &lt;img src=&#34;https://duxingyi-charles.github.io/img/BSH/fig-gallery-2D.png&#34; alt=&#34;fig-gallery-2D&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Figure 2. Several 2D shapes modeled by BSH. Halfspaces for the last two shapes are not shown due to their complexity.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;3d-shape-design&#34;&gt;&lt;strong&gt;3D Shape Design&lt;/strong&gt;&lt;/h2&gt;















&lt;figure id=&#34;figure-figure-3-various-bsh-shapes-created-from-one-torus-and-several-spheres-by-choosing-which-segment-of-the-torus-has-a-sample-different-segments-can-be-kept-or-deleted-while-the-shape-remains-a-solid&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://duxingyi-charles.github.io/img/BSH/fig-beads.png&#34; data-caption=&#34;Figure 3. Various BSH shapes created from one torus and several spheres. By choosing which segment of the torus has a sample, different segments can be kept or deleted while the shape remains a solid.&#34;&gt;


  &lt;img src=&#34;https://duxingyi-charles.github.io/img/BSH/fig-beads.png&#34; alt=&#34;fig-beads&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Figure 3. Various BSH shapes created from one torus and several spheres. By choosing which segment of the torus has a sample, different segments can be kept or deleted while the shape remains a solid.
  &lt;/figcaption&gt;


&lt;/figure&gt;
















&lt;figure id=&#34;figure-figure-4-shape-modeled-by-bsh-that-cannot-be-represented-by-csg-without-additional-halfspaces-for-the-first-two-shapes-input-halfspaces-are-on-the-left-and-the-final-shapes-are-on-the-right-the-last-shape-heart-is-shown-in-two-views-and-the-second-view-shows-a-halfspace-represented-as-a-vipss-implicit-surface-interpolating-a-sparse-set-of-control-points-red-spheres&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://duxingyi-charles.github.io/img/BSH/fig-gallery-3D.png&#34; data-caption=&#34;Figure 4. Shape modeled by BSH that cannot be represented by CSG without additional halfspaces. For the first two shapes, input halfspaces are on the left and the final shapes are on the right. The last shape (“Heart”) is shown in two views, and the second view shows a halfspace represented as a VIPSS implicit surface interpolating a sparse set of control points (red spheres).&#34;&gt;


  &lt;img src=&#34;https://duxingyi-charles.github.io/img/BSH/fig-gallery-3D.png&#34; alt=&#34;fig-gallery-3D&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Figure 4. Shape modeled by BSH that cannot be represented by CSG without additional halfspaces. For the first two shapes, input halfspaces are on the left and the final shapes are on the right. The last shape (“Heart”) is shown in two views, and the second view shows a halfspace represented as a VIPSS implicit surface interpolating a sparse set of control points (red spheres).
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;converted-from-other-representations&#34;&gt;&lt;strong&gt;Converted from other representations&lt;/strong&gt;&lt;/h2&gt;















&lt;figure id=&#34;figure-figure-5-free-form-bsh-shapes-elk-flower-boat-and-chair-converted-from-meshes-and-undergone-editing-of-the-halfspaces-andor-their-samples-top-each-row-shows-the-input-segmented-mesh-the-converted-bsh-and-result-after-editing-selected-halfspaces-before-and-after-editing-are-shown-with-transparency-bottom-each-row-shows-the-converted-bsh-and-two-editing-results&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://duxingyi-charles.github.io/img/BSH/fig-gallery-reverse.png&#34; data-caption=&#34;Figure 5. Free-form BSH shapes (Elk, Flower, Boat, and Chair) converted from meshes and undergone editing of the halfspaces and/or their samples. Top: each row shows the input segmented mesh, the converted BSH, and result after editing. Selected halfspaces before and after editing are shown with transparency. Bottom: each row shows the converted BSH and two editing results.&#34;&gt;


  &lt;img src=&#34;https://duxingyi-charles.github.io/img/BSH/fig-gallery-reverse.png&#34; alt=&#34;fig-gallery-reverse&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Figure 5. Free-form BSH shapes (Elk, Flower, Boat, and Chair) converted from meshes and undergone editing of the halfspaces and/or their samples. Top: each row shows the input segmented mesh, the converted BSH, and result after editing. Selected halfspaces before and after editing are shown with transparency. Bottom: each row shows the converted BSH and two editing results.
  &lt;/figcaption&gt;


&lt;/figure&gt;
















&lt;figure id=&#34;figure-figure-6-a-cad-mesh-segmented-and-fitted-by-primitives-a-showing-two-views-the-converted-bsh-shape-b-showing-two-views-and-two-edited-shapes-with-altered-structure-eg-fewer-rings-and-a-missing-shelf-c-and-modified-primitive-geometry-d&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://duxingyi-charles.github.io/img/BSH/fig-cad.png&#34; data-caption=&#34;Figure 6. A CAD mesh segmented and fitted by primitives (a; showing two views), the converted BSH shape (b; showing two views), and two edited shapes with altered structure (e.g., fewer rings and a missing shelf) (c) and modified primitive geometry (d).&#34;&gt;


  &lt;img src=&#34;https://duxingyi-charles.github.io/img/BSH/fig-cad.png&#34; alt=&#34;fig-cad&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Figure 6. A CAD mesh segmented and fitted by primitives (a; showing two views), the converted BSH shape (b; showing two views), and two edited shapes with altered structure (e.g., fewer rings and a missing shelf) (c) and modified primitive geometry (d).
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;!-- ### **Acknowledgments**

This work is supported in part by NSF grant RI-1618685, NIH grant U2C CA233303-1, and Simons Math+X Investigators Award 400837. We would like to thank authors of several papers for providing code, data, and help with comparisons, and especially Hanxiao Shen, Ofir Weber, Alon Bright, Zohar Levi, and Xiao-Ming Fu. --&gt;
</description>
    </item>
    
    <item>
      <title>Lifting Simplices to Find Injectivity</title>
      <link>https://duxingyi-charles.github.io/publication/lifting-simplices-to-find-injectivity/</link>
      <pubDate>Mon, 04 May 2020 17:23:54 -0500</pubDate>
      <guid>https://duxingyi-charles.github.io/publication/lifting-simplices-to-find-injectivity/</guid>
      <description>














&lt;figure id=&#34;figure-figure-1-injectively-mapping-a-complex-surface-mesh-lucy-48k-vertices-to-a-non-convex-boundary-letter-g-with-zoom-ins-on-the-left-and-mapping-a-tetrahedral-mesh-armadillo-6k-vertices-to-a-highly-deformed-target-surface-on-the-right-as-a-result-of-minimizing-our-novel-energy-these-two-examples-are-part-of-our-new-benchmark-data-set&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://duxingyi-charles.github.io/img/TLC/fig1.png&#34; data-caption=&#34;Figure 1. Injectively mapping a complex surface mesh (Lucy, 48K vertices) to a non-convex boundary (letter “G”, with zoom-ins), on the left, and mapping a tetrahedral mesh (Armadillo, 6K vertices) to a highly deformed target surface, on the right, as a result of minimizing our novel energy. These two examples are part of our new benchmark data set.&#34;&gt;


  &lt;img src=&#34;https://duxingyi-charles.github.io/img/TLC/fig1.png&#34; alt=&#34;fig1&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Figure 1. Injectively mapping a complex surface mesh (Lucy, 48K vertices) to a non-convex boundary (letter “G”, with zoom-ins), on the left, and mapping a tetrahedral mesh (Armadillo, 6K vertices) to a highly deformed target surface, on the right, as a result of minimizing our novel energy. These two examples are part of our new benchmark data set.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;abstract&#34;&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Mapping a source mesh into a target domain while preserving local injectivity is an important but highly non-trivial task. Existing methods either require an already-injective starting configuration, which is often not available, or rely on sophisticated solving schemes. We propose a novel energy form, called Total Lifted Content (&lt;strong&gt;TLC&lt;/strong&gt;), that is equipped with theoretical properties desirable for injectivity optimization. By lifting the simplices of the mesh into a higher dimension and measuring their contents (2D area or 3D volume) there, &lt;strong&gt;TLC&lt;/strong&gt; is smooth over the entire embedding space and its global minima are always injective. The energy is simple to minimize using standard gradient-based solvers. Our method achieved &lt;em&gt;100&lt;/em&gt;% success rate on an extensive benchmark of embedding problems for triangular and tetrahedral meshes, on which existing methods only have varied success.&lt;/p&gt;
&lt;h3 id=&#34;video&#34;&gt;&lt;strong&gt;Video&lt;/strong&gt;&lt;/h3&gt;












  


&lt;video controls &gt;
  &lt;source src=&#34;fast_forward.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;
&lt;h3 id=&#34;dataset&#34;&gt;&lt;strong&gt;Dataset&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;We present the large benchmark dataset of 2D/3D meshes used to compare with previous methods. The dataset includes &lt;em&gt;10743&lt;/em&gt; triangular mesh examples and &lt;em&gt;904&lt;/em&gt; tetrahedral mesh examples. The dataset is divided into 3 categories, 2D parameterization, 3D parameterization and 3D deformation.&lt;/p&gt;
&lt;h4 id=&#34;2d-parameterization&#34;&gt;2D Parameterization&lt;/h4&gt;















&lt;figure id=&#34;figure-figure-2-four-examples-in-the-2d-parameterization-category-derived-from-liu-et-al-2018-where-methods-ff-and-lbd-failed-to-find-injective-embeddings-inverted-triangles-are-colored-in-red-and-the-numbers-of-inversion-are-marked-in-red&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://duxingyi-charles.github.io/img/TLC/2D-Param.png&#34; data-caption=&#34;Figure 2. Four examples in the 2D parameterization category derived from [Liu et al. 2018], where methods FF and LBD failed to find injective embeddings. Inverted triangles are colored in red, and the numbers of inversion are marked in red.&#34;&gt;


  &lt;img src=&#34;https://duxingyi-charles.github.io/img/TLC/2D-Param.png&#34; alt=&#34;2D Parameterization&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Figure 2. Four examples in the 2D parameterization category derived from [Liu et al. 2018], where methods FF and LBD failed to find injective embeddings. Inverted triangles are colored in red, and the numbers of inversion are marked in red.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h4 id=&#34;3d-parameterization&#34;&gt;3D Parameterization&lt;/h4&gt;















&lt;figure id=&#34;figure-figure-3-three-examples-from-the-3d-parameterization-category-each-mapping-a-rest-tetrahedral-mesh-into-a-sphere-top-smooth-surface-middle-and-a-polycube-bottom-each-example-is-a-failure-case-for-one-of-the-three-methods-ff-lbd-and-sa-inverted-tetrahedra-are-colored-in-red-and-the-numbers-of-inversion-are-marked-in-red&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://duxingyi-charles.github.io/img/TLC/3D-Param.png&#34; data-caption=&#34;Figure 3. Three examples from the 3D parameterization category, each mapping a rest tetrahedral mesh into a sphere (top), smooth surface (middle), and a polycube (bottom). Each example is a failure case for one of the three methods, FF, LBD and SA. Inverted tetrahedra are colored in red, and the numbers of inversion are marked in red.&#34;&gt;


  &lt;img src=&#34;https://duxingyi-charles.github.io/img/TLC/3D-Param.png&#34; alt=&#34;3D Parameterization&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Figure 3. Three examples from the 3D parameterization category, each mapping a rest tetrahedral mesh into a sphere (top), smooth surface (middle), and a polycube (bottom). Each example is a failure case for one of the three methods, FF, LBD and SA. Inverted tetrahedra are colored in red, and the numbers of inversion are marked in red.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h4 id=&#34;3d-deformation&#34;&gt;3D Deformation&lt;/h4&gt;















&lt;figure id=&#34;figure-figure-4-three-examples-in-the-3d-deformation-category-a-twisting-armadillo-where-ff-sa-and-lbd-all-failed-to-reach-injectivity-the-graph-in-the-top-right-shows-the-number-of-inverted-tetrahedra-for-each-of-the-600-frames-of-the-deformation-sequence-ellipses-indicate-the-frames-from-which-the-three-examples-were-taken&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://duxingyi-charles.github.io/img/TLC/3D-Deform.png&#34; data-caption=&#34;Figure 4. Three examples in the 3D deformation category (a twisting armadillo) where FF, SA and LBD all failed to reach injectivity. The graph in the top-right shows the number of inverted tetrahedra for each of the 600&amp;#43; frames of the deformation sequence (ellipses indicate the frames from which the three examples were taken).&#34;&gt;


  &lt;img src=&#34;https://duxingyi-charles.github.io/img/TLC/3D-Deform.png&#34; alt=&#34;3D Deformation&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Figure 4. Three examples in the 3D deformation category (a twisting armadillo) where FF, SA and LBD all failed to reach injectivity. The graph in the top-right shows the number of inverted tetrahedra for each of the 600+ frames of the deformation sequence (ellipses indicate the frames from which the three examples were taken).
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h4 id=&#34;dataset-organization&#34;&gt;Dataset Organization&lt;/h4&gt;
&lt;p&gt;Each triangular mesh example contains&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;input.obj&lt;/code&gt;: rest mesh and initial mesh (as uv coordinates)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;handles.txt&lt;/code&gt;: list of indices of the fixed vertices&lt;/li&gt;
&lt;li&gt;&lt;code&gt;result.obj&lt;/code&gt;: result of our method&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each tetrahedral mesh example contains&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rest.vtk&lt;/code&gt;: rest mesh&lt;/li&gt;
&lt;li&gt;&lt;code&gt;init.vtk&lt;/code&gt;: initial mesh&lt;/li&gt;
&lt;li&gt;&lt;code&gt;handles.txt&lt;/code&gt;: list of indices of the fixed vertices&lt;/li&gt;
&lt;li&gt;&lt;code&gt;result.vtk&lt;/code&gt;: result of our method&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is an introduction to 
&lt;a href=&#34;https://lorensen.github.io/VTKExamples/site/VTKFileFormats/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;VTK format&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://doi.org/10.5281/zenodo.3827969&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;Download Dataset&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;!-- ### **Acknowledgments**

This work is supported in part by NSF grant RI-1618685, NIH grant U2C CA233303-1, and Simons Math+X Investigators Award 400837. We would like to thank authors of several papers for providing code, data, and help with comparisons, and especially Hanxiao Shen, Ofir Weber, Alon Bright, Zohar Levi, and Xiao-Ming Fu. --&gt;
</description>
    </item>
    
  </channel>
</rss>
